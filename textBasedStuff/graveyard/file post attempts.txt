
#  /createWidget:
#    post:
#      operationId: createWidget
#      summary: Creates a widget based on an image.
#      description: Uploads a file reference using its file id. This file should be an image created by DALLÂ·E or uploaded by the user. JPG, WEBP, and PNG are supported for widget creation.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                openaiFileIdRefs:
#                  type: array
#                  items:
#                    type: string

#  /encodedPatchFile:
#    post:
#      x-openai-isConsequential: false
#      summary: Upload an encoded file patch which will be applied to the specified path
#      operationId: encodedPatchFile
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                encodedPatchFile:
#                  type: string
#                  example: "base64_encoded_content_here"
#                filePath:
#                  type: string
#                  description: The path to the file to be patched
#                  example: "/full/path/to/file.txt"
#      responses:
#        '200':
#          description: File patched successfully
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: File patched successfully to /full/path/to/file.txt
#        '400':
#          description: Bad request
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
#                    example: encodedPatchFile and filePath are required
#        '500':
#          description: Server error
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
#                    example: Error patching file

#  /files:
#    post:
#      x-openai-isConsequential: false
#      operationId: postFiles
#      summary: Upload and write files to specified paths
#      description: Uploads files to the server running locally on the user's machine to help make changes in the user's local project.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                openaiFileIdRefs:
#                  type: array
#                  items:
#                    type: string
#      responses:
#        '200':
#          description: Files written successfully
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: Files written successfully
#        '400':
#          description: Bad request
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
#                    example: Files are required and must be an array
#        '500':
#          description: Server error
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
